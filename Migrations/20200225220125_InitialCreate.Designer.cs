// <auto-generated />
using System;
using CroissantApi.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CroissantApi.Migrations
{
    [DbContext(typeof(CroissantContext))]
    [Migration("20200225220125_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CroissantApi.Models.Rule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CoinsCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoinsCapacity = 1,
                            Description = "Fais un Win+L sinon tu paie les croissants, tu as 1 chance !!!",
                            Name = "Ton ordi !"
                        },
                        new
                        {
                            Id = 2,
                            CoinsCapacity = 3,
                            Description = "Quand tu as fini la journée, tu met ta chaise sur ta table, sinon tu paie les croissants. Tu as 3 chances.",
                            Name = "La chaise !"
                        },
                        new
                        {
                            Id = 3,
                            CoinsCapacity = 3,
                            Description = "Quand tu sors tu ferme la porte derière toi, sinon tu paie les croissants. Tu as 3 chances.",
                            Name = "La porte !"
                        });
                });

            modelBuilder.Entity("CroissantApi.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("RuleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RuleId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESI RIL B2 aka Croissanistan"
                        });
                });

            modelBuilder.Entity("CroissantApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1997, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Sébastien",
                            Lastname = "Vallet",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Sylvain",
                            Lastname = "Bayon",
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("CroissantApi.Models.UserRule", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RuleId")
                        .HasColumnType("integer");

                    b.Property<int>("CoinsQuantity")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RuleId");

                    b.HasIndex("RuleId");

                    b.ToTable("UserRules");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RuleId = 1,
                            CoinsQuantity = 1
                        },
                        new
                        {
                            UserId = 2,
                            RuleId = 3,
                            CoinsQuantity = 2
                        });
                });

            modelBuilder.Entity("CroissantApi.TeamRule", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("RuleId")
                        .HasColumnType("integer");

                    b.HasKey("TeamId", "RuleId");

                    b.HasIndex("RuleId");

                    b.ToTable("TeamRule");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            RuleId = 1
                        },
                        new
                        {
                            TeamId = 1,
                            RuleId = 2
                        },
                        new
                        {
                            TeamId = 1,
                            RuleId = 3
                        });
                });

            modelBuilder.Entity("CroissantApi.Models.Team", b =>
                {
                    b.HasOne("CroissantApi.Models.Rule", null)
                        .WithMany("Teams")
                        .HasForeignKey("RuleId");
                });

            modelBuilder.Entity("CroissantApi.Models.User", b =>
                {
                    b.HasOne("CroissantApi.Models.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CroissantApi.Models.UserRule", b =>
                {
                    b.HasOne("CroissantApi.Models.Rule", "Rule")
                        .WithMany("UserRules")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CroissantApi.Models.User", "User")
                        .WithMany("UserRules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CroissantApi.TeamRule", b =>
                {
                    b.HasOne("CroissantApi.Models.Rule", "Rule")
                        .WithMany("TeamRules")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CroissantApi.Models.Team", "Team")
                        .WithMany("TeamRules")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
